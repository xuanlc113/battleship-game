{"version":3,"sources":["utils/ItemTypes.js","components/Cell.js","utils/helper.js","utils/Gameboard.js","utils/Ship.js","components/PlayerBoard.js","components/Ship.js","components/ComputerBoard.js","utils/Computer.js","components/Game.js","App.js","index.js"],"names":["ItemTypes","getNewCoords","offset","item","x","y","Math","round","Cell","props","useDrop","accept","drop","monitor","getDifferenceFromInitialOffset","board","moveShip","id","orientation","canDrop","canMoveShip","ref","className","style","onClick","clickCell","pos","randomizeBoard","gameboard","miss","hit","ships","sunk","ship","find","otherShips","filter","length","getOrientation","allShipCoords","getAllCoordsAtNewPos","coord","containPos","containShip","i","addShip","push","getCoord","pop","receiveAttack","isSunk","allShipsSunk","getShips","changePosition","splice","Gameboard","shipsToAdd","randomShip","damage","ori","allCords","Ship","floor","random","includePos","arr","PlayerBoard","useState","setRender","prevState","next","cell","j","renderBoard","turn","children","VerticalShip","styled","div","isDragging","HorizontalShip","useDrag","type","collect","drag","start","ComputerBoard","map","inArr","Computer","history","surrounding","toHit","attackCoord","searchSurrounding","verticalSearch","coords","present","horizontalSearch","upPos","downPos","leftPos","rightPos","getHistory","attack","toHitPos","shift","randomCoords","Game","setStart","computerBoard","setComputerBoard","playerBoard","setPlayerBoard","computer","setComputer","setTurn","newGameRef","useRef","winner","setWinner","useEffect","current","setTimeout","checkWin","disabled","App","DndProvider","backend","Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.822a7453.chunk.js","sourcesContent":["export const ItemTypes = {\r\n  SHIP: \"ship\"\r\n};\r\n","import React from \"react\";\r\nimport \"../styles/Cell.css\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { ItemTypes } from \"../utils/ItemTypes\";\r\n\r\nfunction getNewCoords(offset, item) {\r\n  let x = 40 * item.x;\r\n  let y = 40 * item.y;\r\n\r\n  x = Math.round((x + offset.x) / 40);\r\n  y = Math.round((y + offset.y) / 40);\r\n  return { x, y };\r\n}\r\n\r\nconst Cell = props => {\r\n  const [, drop] = useDrop({\r\n    accept: ItemTypes.SHIP,\r\n    drop: (item, monitor) => {\r\n      const offset = monitor.getDifferenceFromInitialOffset();\r\n      const { x, y } = getNewCoords(offset, item);\r\n      props.board.moveShip(item.id, x, y, item.orientation);\r\n      return undefined;\r\n    },\r\n    canDrop: (item, monitor) => {\r\n      const offset = monitor.getDifferenceFromInitialOffset();\r\n      const { x, y } = getNewCoords(offset, item);\r\n      return props.board.canMoveShip(item.id, x, y);\r\n    }\r\n  });\r\n  return (\r\n    <div\r\n      ref={drop}\r\n      className={`cell ${props.style}`}\r\n      onClick={props.clickCell ? () => props.clickCell(props.pos) : null}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import { Gameboard } from \"./Gameboard\";\r\nimport { Ship } from \"./Ship\";\r\n\r\nfunction randomizeBoard() {\r\n  let gameboard = Gameboard();\r\n  let shipsToAdd = [5, 4, 4, 3, 3, 2, 2, 2];\r\n  for (let i in shipsToAdd) {\r\n    let ship = randomShip(i, shipsToAdd[i]);\r\n    while (!gameboard.addShip(ship)) {\r\n      ship = randomShip(i, shipsToAdd[i]);\r\n    }\r\n  }\r\n  return gameboard;\r\n}\r\n\r\nfunction randomShip(id, length) {\r\n  let x = Math.floor(Math.random() * 10);\r\n  let y = Math.floor(Math.random() * 10);\r\n  let orientation = Math.random();\r\n  return Ship(length, x, y, orientation < 0.5, id);\r\n}\r\n\r\nfunction includePos(arr, pos) {\r\n  for (let i of arr) {\r\n    if (i[0] === pos[0] && i[1] === pos[1]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport { randomizeBoard, includePos };\r\n","import { randomizeBoard } from \"./helper\";\r\n\r\nfunction Gameboard() {\r\n  let miss = [];\r\n  let hit = [];\r\n  let ships = [];\r\n  let sunk = 0;\r\n\r\n  const addShip = ship => {\r\n    ships.push(ship);\r\n    if (!canMoveShip(ship.id, ship.getCoord()[0], ship.getCoord()[1])) {\r\n      ships.pop();\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const receiveAttack = pos => {\r\n    let ship = containShip(pos, ships);\r\n    if (ship !== null) {\r\n      ship.hit(pos);\r\n      hit.push(pos);\r\n      if (ship.isSunk()) {\r\n        sunk++;\r\n      }\r\n    } else {\r\n      miss.push(pos);\r\n    }\r\n  };\r\n\r\n  const allShipsSunk = () => ships.length === sunk;\r\n\r\n  const canMoveShip = (id, x, y) => {\r\n    let ship = ships.find(ship => ship.id === id);\r\n    let otherShips = ships.filter(ship => ship.id != id);\r\n    let length = ship.length;\r\n    let orientation = ship.getOrientation();\r\n    let allShipCoords = ship.getAllCoordsAtNewPos(x, y);\r\n    if (orientation) {\r\n      if (y + length - 1 > 9 || y < 0) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (x + length - 1 > 9 || x < 0) {\r\n        return false;\r\n      }\r\n    }\r\n    for (let ship of otherShips) {\r\n      for (let coord of allShipCoords) {\r\n        if (ship.containPos(coord)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const moveShip = (id, x, y, orientation) => {\r\n    let ship = ships.find(ship => ship.id === id);\r\n    ship.changePosition(x, y, orientation);\r\n    ships.splice(id, 1, ship);\r\n  };\r\n\r\n  const containShip = pos => {\r\n    for (let i of ships) {\r\n      if (i.containPos(pos)) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const getShips = () => ships;\r\n\r\n  return {\r\n    addShip,\r\n    receiveAttack,\r\n    miss,\r\n    hit,\r\n    allShipsSunk,\r\n    getShips,\r\n    canMoveShip,\r\n    moveShip,\r\n    containShip\r\n  };\r\n}\r\n\r\nexport { Gameboard };\r\n","///orientation true = vertical, false = horizontal\r\nfunction Ship(length, x, y, orientation, id) {\r\n  let coord = [x, y];\r\n  let damage = 0;\r\n  let ori = orientation;\r\n  const containPos = pos => {\r\n    let [x, y] = getCoord();\r\n    if (getOrientation()) {\r\n      if (pos[0] === x && pos[1] >= y && pos[1] < y + length) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    if (pos[1] === y && pos[0] >= x && pos[0] < x + length) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const hit = pos => {\r\n    if (containPos(pos)) {\r\n      damage++;\r\n    }\r\n  };\r\n  const isSunk = () => length === damage;\r\n\r\n  const changePosition = (x, y, orientation) => {\r\n    coord = [x, y];\r\n    ori = orientation;\r\n  };\r\n\r\n  const getCoord = () => coord;\r\n\r\n  const getAllCoordsAtNewPos = (x, y) => {\r\n    let allCords = [];\r\n    if (orientation) {\r\n      for (let i = 0; i < length; i++) {\r\n        allCords.push([x, y + i]);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < length; i++) {\r\n        allCords.push([x + i, y]);\r\n      }\r\n    }\r\n    return allCords;\r\n  };\r\n\r\n  const getOrientation = () => ori;\r\n  return {\r\n    length,\r\n    hit,\r\n    isSunk,\r\n    containPos,\r\n    getOrientation,\r\n    id,\r\n    changePosition,\r\n    getCoord,\r\n    getAllCoordsAtNewPos\r\n  };\r\n}\r\n\r\nexport { Ship };\r\n","import React, { useState } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { includePos } from \"../utils/helper\";\r\nimport \"../styles/Board.css\";\r\n\r\nconst PlayerBoard = props => {\r\n  const [, setRender] = useState(true);\r\n\r\n  function clickCell(pos) {\r\n    props.board.receiveAttack(pos);\r\n    setRender(prevState => !prevState);\r\n    props.next();\r\n  }\r\n\r\n  function renderBoard() {\r\n    let cell = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 10; j++) {\r\n        if (includePos(props.board.hit, [j, i])) {\r\n          cell.push(<Cell style=\"hit\" />);\r\n        } else if (includePos(props.board.miss, [j, i])) {\r\n          cell.push(<Cell style=\"miss\" />);\r\n        } else {\r\n          cell.push(\r\n            <Cell\r\n              style=\"empty\"\r\n              clickCell={clickCell}\r\n              pos={[j, i]}\r\n              board={props.board}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {renderBoard()}\r\n      {!props.turn && props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerBoard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ItemTypes } from \"../utils/ItemTypes\";\r\n\r\nconst VerticalShip = styled.div`\r\n  position: absolute;\r\n  left: ${props => props.coord[0] * 40}px;\r\n  top: ${props => props.coord[1] * 40}px;\r\n  width: 40px;\r\n  height: ${props => props.length * 40}px;\r\n  border: 2px royalblue solid;\r\n  background: rgba(245, 245, 245, 0.6);\r\n  z-index: ${props => (props.isDragging ? -1 : 2)};\r\n  cursor: move;\r\n`;\r\n\r\nconst HorizontalShip = styled.div`\r\n  position: absolute;\r\n  left: ${props => props.coord[0] * 40}px;\r\n  top: ${props => props.coord[1] * 40}px;\r\n  width: ${props => props.length * 40}px;\r\n  height: 40px;\r\n  border: 2px royalblue solid;\r\n  background: rgba(245, 245, 245, 0.6);\r\n  z-index: ${props => (props.isDragging ? -1 : 2)};\r\n  cursor: move;\r\n`;\r\n\r\nconst Ship = props => {\r\n  const [{ isDragging }, drag] = useDrag({\r\n    item: {\r\n      type: ItemTypes.SHIP,\r\n      id: props.ship.id,\r\n      length: props.ship.length,\r\n      x: props.ship.getCoord()[0],\r\n      y: props.ship.getCoord()[1],\r\n      orientation: props.ship.getOrientation()\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n\r\n  if (props.ship.getOrientation()) {\r\n    return (\r\n      <VerticalShip\r\n        ref={drag}\r\n        length={props.ship.length}\r\n        coord={props.ship.getCoord()}\r\n        start={props.start}\r\n        isDragging={isDragging}\r\n      ></VerticalShip>\r\n    );\r\n  }\r\n  return (\r\n    <HorizontalShip\r\n      ref={drag}\r\n      length={props.ship.length}\r\n      coord={props.ship.getCoord()}\r\n      start={props.start}\r\n      isDragging={isDragging}\r\n    ></HorizontalShip>\r\n  );\r\n};\r\n\r\nexport default Ship;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Ship from \"./Ship\";\r\nimport Cell from \"./Cell\";\r\nimport { includePos } from \"../utils/helper\";\r\nimport \"../styles/Board.css\";\r\n\r\nconst ComputerBoard = props => {\r\n  function renderBoard() {\r\n    let cell = [];\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let j = 0; j < 10; j++) {\r\n        if (includePos(props.board.hit, [j, i])) {\r\n          cell.push(<Cell style=\"hit\" />);\r\n        } else if (includePos(props.board.miss, [j, i])) {\r\n          cell.push(<Cell style=\"miss\" />);\r\n        } else {\r\n          cell.push(<Cell style=\"empty\" board={props.board} pos={[j, i]} />);\r\n        }\r\n      }\r\n    }\r\n    return cell;\r\n  }\r\n\r\n  function renderShips() {\r\n    return props.board\r\n      .getShips()\r\n      .map(ship => <Ship ship={ship} start={props.start} />);\r\n  }\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {renderBoard()}\r\n      {renderShips()}\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComputerBoard;\r\n","function Computer() {\r\n  let history = [];\r\n  let surrounding = false;\r\n  let toHit = [];\r\n  const attack = (board, pos) => {\r\n    if (surrounding) {\r\n      surrounding = false;\r\n    }\r\n    if (toHit.length > 0) {\r\n      let toHitPos = toHit.shift();\r\n      board.receiveAttack(toHitPos);\r\n      history.push(toHitPos);\r\n    } else {\r\n      attackCoord(board, pos);\r\n    }\r\n  };\r\n\r\n  const attackCoord = (board, pos) => {\r\n    board.receiveAttack(pos);\r\n    history.push(pos);\r\n    if (board.containShip(pos) !== null) {\r\n      surrounding = true;\r\n      toHit = searchSurrounding(board, pos);\r\n      if (toHit.length === 0) {\r\n        surrounding = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const searchSurrounding = (board, pos) => {\r\n    let [coords, present] = verticalSearch(board, pos);\r\n    if (present) {\r\n      return coords;\r\n    }\r\n    [coords, present] = horizontalSearch(board, pos);\r\n    if (present) {\r\n      return coords;\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const verticalSearch = (board, pos) => {\r\n    let coords = [];\r\n    let [x, y] = pos;\r\n    let upPos = [x, y - 1];\r\n    let downPos = [x, y + 1];\r\n    let present = false;\r\n    while (board.containShip(upPos) !== null) {\r\n      if (!inArr(history, upPos)) {\r\n        coords.push(upPos);\r\n        present = true;\r\n      }\r\n      upPos = [x, upPos[1] - 1];\r\n    }\r\n    if (upPos[1] > -1 && !inArr(history, upPos)) {\r\n      coords.push(upPos);\r\n    }\r\n    while (board.containShip(downPos) !== null) {\r\n      if (!inArr(history, downPos)) {\r\n        coords.push(downPos);\r\n        present = true;\r\n      }\r\n      downPos = [x, downPos[1] + 1];\r\n    }\r\n    if (downPos[1] < 10 && !inArr(history, downPos)) {\r\n      coords.push(downPos);\r\n    }\r\n    return [coords, present];\r\n  };\r\n\r\n  const horizontalSearch = (board, pos) => {\r\n    let coords = [];\r\n    let [x, y] = pos;\r\n    let leftPos = [x - 1, y];\r\n    let rightPos = [x + 1, y];\r\n    let present = false;\r\n    while (board.containShip(leftPos) !== null) {\r\n      if (!inArr(history, leftPos)) {\r\n        coords.push(leftPos);\r\n        present = true;\r\n      }\r\n      leftPos = [leftPos[0] - 1, y];\r\n    }\r\n    if (leftPos[0] > -1 && !inArr(history, leftPos)) {\r\n      coords.push(leftPos);\r\n    }\r\n    while (board.containShip(rightPos) !== null) {\r\n      if (!inArr(history, rightPos)) {\r\n        coords.push(rightPos);\r\n        present = true;\r\n      }\r\n      rightPos = [rightPos[0] + 1, y];\r\n    }\r\n    if (rightPos[0] < 10 && !inArr(history, rightPos)) {\r\n      coords.push(rightPos);\r\n    }\r\n    return [coords, present];\r\n  };\r\n\r\n  const randomCoords = () => {\r\n    let x = Math.floor(Math.random() * 10);\r\n    let y = Math.floor(Math.random() * 10);\r\n    while (inArr(history, [x, y])) {\r\n      x = Math.floor(Math.random() * 10);\r\n      y = Math.floor(Math.random() * 10);\r\n    }\r\n    return [x, y];\r\n  };\r\n\r\n  const getHistory = () => history;\r\n  return {\r\n    getHistory,\r\n    attack,\r\n    attackCoord,\r\n    randomCoords,\r\n    verticalSearch,\r\n    horizontalSearch\r\n  };\r\n}\r\n\r\nfunction inArr(arr, pos) {\r\n  for (let i of arr) {\r\n    if (i[0] === pos[0] && i[1] === pos[1]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default Computer;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PlayerBoard from \"./PlayerBoard\";\r\nimport ComputerBoard from \"./ComputerBoard\";\r\nimport \"../styles/Game.css\";\r\nimport { randomizeBoard } from \"../utils/helper\";\r\nimport Computer from \"../utils/Computer\";\r\n\r\nconst Game = () => {\r\n  const [start, setStart] = useState(false);\r\n  const [computerBoard, setComputerBoard] = useState(randomizeBoard());\r\n  const [playerBoard, setPlayerBoard] = useState(randomizeBoard());\r\n  const [computer, setComputer] = useState(Computer());\r\n  const [turn, setTurn] = useState(false);\r\n  const newGameRef = useRef(false);\r\n  const [winner, setWinner] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (newGameRef.current) {\r\n      if (winner === \"\") {\r\n        if (!turn) {\r\n          setTimeout(() => {\r\n            computer.attack(computerBoard, computer.randomCoords());\r\n            setTurn(true);\r\n          }, 200);\r\n        }\r\n      }\r\n    } else {\r\n      newGameRef.current = true;\r\n    }\r\n    checkWin();\r\n  }, [turn]);\r\n\r\n  function checkWin() {\r\n    if (computerBoard.allShipsSunk()) {\r\n      setWinner(\"computer\");\r\n      setTurn(false);\r\n    }\r\n    if (playerBoard.allShipsSunk()) {\r\n      setWinner(\"player\");\r\n      setTurn(false);\r\n    }\r\n  }\r\n\r\n  function gameStatus() {\r\n    if (start) {\r\n      setComputerBoard(randomizeBoard());\r\n      setPlayerBoard(randomizeBoard());\r\n      setTurn(false);\r\n      setWinner(\"\");\r\n      setComputer(Computer());\r\n      newGameRef.current = false;\r\n    } else {\r\n      setTurn(true);\r\n    }\r\n    setStart(prevState => !prevState);\r\n  }\r\n\r\n  function random() {\r\n    setComputerBoard(randomizeBoard());\r\n    setPlayerBoard(randomizeBoard());\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <h1>Battleship</h1>\r\n      <div className=\"game-status\">\r\n        <button onClick={() => gameStatus()}>\r\n          {start ? \"New Game\" : \"Start\"}\r\n        </button>\r\n        <p>\r\n          {winner !== \"\"\r\n            ? `${winner} wins`\r\n            : start\r\n            ? turn\r\n              ? \"your turn\"\r\n              : \" computer turn\"\r\n            : \"setup\"}\r\n        </p>\r\n        <button onClick={() => random()} disabled={start}>\r\n          random\r\n        </button>\r\n      </div>\r\n      <div className=\"play-area\">\r\n        {start ? (\r\n          <ComputerBoard\r\n            board={computerBoard}\r\n            next={() => setTurn(prevState => !prevState)}\r\n            turn={turn}\r\n            start={start}\r\n          >\r\n            <div className=\"click-guard\"></div>\r\n          </ComputerBoard>\r\n        ) : (\r\n          <ComputerBoard\r\n            board={computerBoard}\r\n            next={() => setTurn(prevState => !prevState)}\r\n          />\r\n        )}\r\n        <PlayerBoard\r\n          board={playerBoard}\r\n          next={() => setTurn(prevState => !prevState)}\r\n          turn={turn}\r\n        >\r\n          <div className=\"click-guard\"></div>\r\n        </PlayerBoard>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport Backend from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\n\nfunction App() {\n  return (\n    <DndProvider backend={Backend}>\n      <Game />\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}